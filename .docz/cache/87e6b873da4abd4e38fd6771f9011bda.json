{"remainingRequest":"/Users/brenda/GitRepos/itr-components-lib/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/brenda/GitRepos/itr-components-lib/node_modules/babel-preset-react-app/index.js\",{\"flow\":true}]],\"plugins\":[\"/Users/brenda/GitRepos/itr-components-lib/node_modules/react-hot-loader/babel.js\",[\"/Users/brenda/GitRepos/itr-components-lib/node_modules/babel-plugin-react-docgen/lib/index.js\",{\"resolver\":\"findAllExportedComponentDefinitions\"}]],\"cacheDirectory\":true,\"babelrc\":false}!/Users/brenda/GitRepos/itr-components-lib/src/components/Alert.jsx","dependencies":[{"path":"/Users/brenda/GitRepos/itr-components-lib/src/components/Alert.jsx","mtime":1535120237710},{"path":"/Users/brenda/GitRepos/itr-components-lib/node_modules/cache-loader/dist/cjs.js","mtime":1535121038346},{"path":"/Users/brenda/GitRepos/itr-components-lib/node_modules/babel-loader/lib/index.js","mtime":1534881725000}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/brenda/GitRepos/itr-components-lib/src/components/Alert.jsx\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Fragment } from 'react';\nimport cx from 'classnames';\nimport t from 'prop-types';\nimport styles from './Alert.module.less';\nexport var Alert = function Alert(_ref) {\n  var children = _ref.children,\n      kind = _ref.kind;\n  return React.createElement(\"div\", {\n    className: cx(styles.alert, _defineProperty({}, styles[kind], true)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, children);\n};\nAlert.propTypes = {\n  kind: t.oneOf(['info', 'positive', 'negative', 'warning'])\n};\nAlert.defaultProps = {\n  kind: 'info'\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(Alert, \"Alert\", \"/Users/brenda/GitRepos/itr-components-lib/src/components/Alert.jsx\");\n  leaveModule(module);\n})();\n\n;\nAlert.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"Alert\",\n  \"props\": {\n    \"kind\": {\n      \"defaultValue\": {\n        \"value\": \"'info'\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'info'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'positive'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'negative'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'warning'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"\"\n    }\n  }\n};",{"version":3,"sources":["src/components/Alert.jsx"],"names":["React","Fragment","cx","t","styles","Alert","children","kind","alert","propTypes","oneOf","defaultProps"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,CAAP,MAAc,YAAd;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,IAAb,QAAaA,IAAb;AAAA,SACnB;AACE,IAAA,SAAS,EAAEL,EAAE,CAACE,MAAM,CAACI,KAAR,sBACVJ,MAAM,CAACG,IAAD,CADI,EACK,IADL,EADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGD,QALH,CADmB;AAAA,CAAd;AAUPD,KAAK,CAACI,SAAN,GAAkB;AAChBF,EAAAA,IAAI,EAAEJ,CAAC,CAACO,KAAF,CAAQ,CAAC,MAAD,EAAS,UAAT,EAAqB,UAArB,EAAiC,SAAjC,CAAR;AADU,CAAlB;AAIAL,KAAK,CAACM,YAAN,GAAqB;AACnBJ,EAAAA,IAAI,EAAE;AADa,CAArB;;;;;;;;;;;;0BAdaF,K","sourceRoot":"/Users/brenda/GitRepos/itr-components-lib","sourcesContent":["import React, { Fragment } from 'react'\nimport cx from 'classnames'\nimport t from 'prop-types'\n\nimport styles from './Alert.module.less'\n\nexport const Alert = ({ children, kind }) => (\n  <div\n    className={cx(styles.alert, {\n      [styles[kind]]: true,\n    })}\n  >\n    {children}\n  </div>\n)\n\nAlert.propTypes = {\n  kind: t.oneOf(['info', 'positive', 'negative', 'warning']),\n}\n\nAlert.defaultProps = {\n  kind: 'info',\n}\n"]}]}